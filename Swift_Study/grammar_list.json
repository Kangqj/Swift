{
    "data_list":[
        {
            "title":"可选项Optional",
            "detail":"?，!可选项,判断nil，展开，可选链",
            "url":"https://zhuanlan.zhihu.com/p/462800711",
            "note":"1.可选项无法直接使用，需要展开之后才能使用，确保变量不为nil后才可以使用，这个在编辑阶段就确保了程序的稳定性\n使用可选项绑定来判断可选项是否包含值，如果包含就把值赋给一个临时常量或变量\n可选绑定可以与if或while语句使用来检查可选项内部的值，并赋值给一个临时常量或变量\n2.在可选项后加问号（?）进行函数调用\n如果可选项不为nil，返回一个可选项结果，否则返回nil，函数返回得到的可选项直接使用也是不行的，也需要判断展开才可以\n3.!会强制认为可选类型变量有值，但当可选类型变量为nil时，程序就会crash",
        },
        {
            "title":"测试可选项为nil的场景",
            "detail":"异常场景测试",
            "url":"https://zhuanlan.zhihu.com/p/462800711",
            "note":"!会强制认为可选类型变量有值，但当可选类型变量为nil时，程序就会crash",
        },
        {
            "title":"guard的用法",
            "detail":"guard语句，if判断",
            "url":"https://www.jianshu.com/p/67f3e3ee6a32",
            "note":"guard 语句，类似于 if 语句，基于布尔值表达式来执行语句，使用 guard 语句来要求一个条件必须是真才能执行 guard 之后的，与 if 语句不通，guard语句总是有一个 else 分句 -- else 分句里得代码会在条件不为真的时候执行",
        },
        {
            "title":"Swift的特殊关键字与符号",
            "detail":"特殊语法",
            "url":"https://www.cnblogs.com/MrTao/p/5178019.html",
            "note":"Swift的特殊关键字与符号",
        },
        {
            "title":"as、as!、as? 三种操作符",
            "detail":"转型，类型判断，消除二义性",
            "url":"https://www.cnblogs.com/dukework/p/6553714.html",
            "note":"1. as\n（1）从派生类转换为基类，向上转型（upcasts）\n（2）消除二义性，数值类型转换\n（3）switch 语句中进行模式匹配\n2. as!\n向下转型（Downcasting）时使用。由于是强制类型转换，如果转换失败会报 runtime 运行错误。\n3. as?\nas? 和 as! 操作符的转换规则完全一样。但 as? 如果转换不成功的时候便会返回一个 nil 对象。成功的话返回可选类型值。由于 as? 在转换失败的时候也不会出现错误，所以对于如果能确保100%会成功的转换则可使用 as!，否则使用 as?",
        },
        {
            "title":"OC与Swift混编",
            "detail":"iOS Swift项目内OC文件，调用Swift类方法",
            "url":"https://www.jianshu.com/p/8409b409380b",
            "note":"OC与Swift混编之桥接文件",
        },{
            "title":"让你的 Swift 代码更 Swift",
            "detail":"代码风格",
            "url":"https://juejin.cn/post/7028506186743808008",
            "note":"让你的 Swift 代码更 Swift",
        },{
            "title":"结构体与类",
            "detail":"概念",
            "url":"https://juejin.cn/post/7046043638781968421",
            "note":"结构体与类",
        },{
            "title":"Swift学习之@objc",
            "detail":"@objc",
            "url":"https://www.jianshu.com/p/b651126b1b1d",
            "note":"@objc",
        },
        {
            "title":"Call can throw报错处理",
            "detail":"Call can throw, but it is not marked with 'try' and the error is not handled",
            "url":"https://www.jianshu.com/p/591c69e5b6d1",
            "note":"在调用一个函数时,如果发现该函数最后有一个throws,表示该函数可能会抛出异常,处理方式有三种 try try? try!\ntry 捕捉异常，并且进行处理\ntry？ 系统会自动处理异常, 返回一个可选类型(如果有异常则返回一个nil，如果没有异常则返回对应的值）\ntry! 告诉系统该函数不会有异常 直接返回值 ps：有异常则程序崩溃（慎用）",
        },
        {
            "title":"Value of optional type报错处理",
            "detail":"Value of optional type 'String?' must be unwrapped to a value of type 'String'",
            "url":"https://www.jianshu.com/p/67f3e3ee6a32",
            "note":"原因是变量可能为nil，下面又有用到该变量的地方。所以这种情况，需要用guard语句来判断变量是否为nil，为nil则reture",
        }
    ]
}
